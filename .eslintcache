[{"/Users/codybonsma/gt-ft/sandbox/rps-game/src/index.js":"1","/Users/codybonsma/gt-ft/sandbox/rps-game/src/App.js":"2","/Users/codybonsma/gt-ft/sandbox/rps-game/src/game/Game.jsx":"3","/Users/codybonsma/gt-ft/sandbox/rps-game/src/Home/Home.jsx":"4","/Users/codybonsma/gt-ft/sandbox/rps-game/src/Footer/Footer.jsx":"5","/Users/codybonsma/gt-ft/sandbox/rps-game/src/Modal/Modal.jsx":"6"},{"size":454,"mtime":1607905180879,"results":"7","hashOfConfig":"8"},{"size":572,"mtime":1611630562211,"results":"9","hashOfConfig":"8"},{"size":5091,"mtime":1611612564995,"results":"10","hashOfConfig":"8"},{"size":2315,"mtime":1611609669177,"results":"11","hashOfConfig":"8"},{"size":237,"mtime":1611011037923,"results":"12","hashOfConfig":"8"},{"size":766,"mtime":1611614333509,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"111n20y",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/Users/codybonsma/gt-ft/sandbox/rps-game/src/index.js",[],["30","31"],"/Users/codybonsma/gt-ft/sandbox/rps-game/src/App.js",[],"/Users/codybonsma/gt-ft/sandbox/rps-game/src/game/Game.jsx",["32"],"import React, { useEffect, useState, useRef } from \"react\";\nimport \"./Game.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modal from \"../Modal/Modal\";\nimport rockImg from \"../Images/rock.png\";\nimport paperImg from \"../Images/paper.png\";\nimport scissorImg from \"../Images/scissor.png\";\n\nconst Game = () => {\n  const [userCount, setUserCount] = useState(\"\");\n  const [compCount, setCompCount] = useState(\"\");\n  const [compPlay, setCompPlay] = useState(\"\");\n  const [compAnimation, setCompAnimation] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const actionRef = useRef(\"\");\n\n  useEffect(() => {\n    clearGame();\n  }, []);\n\n  // create two conditionals for a user win and comp win\n\n  if (userCount === 5) {\n    console.log(\"User wins!\");\n    setModalMessage({\n      title: \"You won!\",\n      message: \"Congrats on showing the comp who's boss around here\",\n    });\n    setIsOpen(true);\n    setUserCount(0);\n    setCompCount(0);\n  } else if (compCount === 5) {\n    console.log(\"You lost!\");\n    setModalMessage({\n      title: \"You lost...\",\n      message: \"Go back to that mirror and get some practice in\",\n    });\n    setIsOpen(true);\n    setUserCount(0);\n    setCompCount(0);\n  }\n\n  const clearGame = () => {\n    setUserCount(0);\n    setCompCount(0);\n  };\n\n  const gameRound = (event) => {\n    // access the ref of the user's choice\n    console.log(event);\n    const userChoice = event;\n    // generate a random number for the computer's choice\n\n    const choices = [\"R\", \"P\", \"S\"];\n    let randomNumber = Math.floor(Math.random() * 3);\n    let computerPlay = choices[randomNumber];\n    setCompPlay(computerPlay);\n\n    if (computerPlay === \"R\") {\n      setCompAnimation(rockImg);\n    } else if (computerPlay === \"P\") {\n      setCompAnimation(paperImg);\n    } else if (computerPlay === \"S\") {\n      setCompAnimation(scissorImg);\n    }\n\n    // show the computer's move with timeout\n    setTimeout(() => {\n      setCompPlay(\"\");\n    }, 3000);\n\n    console.log(\"COMP PLAY\", computerPlay);\n\n    switch (userChoice + computerPlay) {\n      case \"RS\":\n      case \"PR\":\n      case \"SP\":\n        console.log(\"USER WINS\");\n        setUserCount(userCount + 1);\n        break;\n\n      case \"RP\":\n      case \"PS\":\n      case \"SR\":\n        console.log(\"COMPUTER WINS\");\n        setCompCount(compCount + 1);\n        break;\n\n      case \"PP\":\n      case \"RR\":\n      case \"SS\":\n        console.log(\"It's a draw\");\n        break;\n\n      default:\n        console.log(\"Nothing to report\");\n    }\n  };\n\n  return (\n    <div className=\"innerContainer container\">\n      <div className=\"row col\">\n        <div className=\"col-sm-5 scoreboard-you\">\n          <h3 id=\"scoreboard-title\">user</h3>\n        </div>\n        <div className=\"col-sm-2 scoreboard\">\n          <p>\n            {userCount} : {compCount}\n          </p>\n        </div>\n        <div className=\"col-sm-5 scoreboard-comp\">\n          <h3 id=\"scoreboard-title\">comp</h3>\n        </div>\n      </div>\n\n      {/* // DO THIS 3X TIMES AT LEAST BETCH */}\n      <Modal\n        score={(userCount, compCount)}\n        outcome={modalMessage}\n        open={isOpen}\n        onClose={() => setIsOpen(false)}\n      />\n\n      <div className=\"row comp-play\">\n        <div className=\"col comp-section\">\n          <div>\n            {compPlay ? (\n              <p>\n                computer plays <br />{\" \"}\n                <img\n                  className=\"computer-play rock-image\"\n                  src={compAnimation}\n                  alt=\"computer play image\"\n                />\n                {/* <h2>{compAnimation}</h2> */}\n              </p>\n            ) : null}\n          </div>\n        </div>\n      </div>\n      <div className=\"row user-buttons\">\n        <div className=\"button shadowmane rock col-sm-4\">\n          <img\n            className=\"rock-image\"\n            src={rockImg}\n            alt=\"rock icon\"\n            ref={actionRef}\n            value=\"R\"\n            onClick={() => gameRound(\"R\")}\n          />\n        </div>\n        <div className=\"button shadowmane paper col-sm-4\">\n          <img\n            className=\"paper-image\"\n            src={paperImg}\n            alt=\"paper icon\"\n            ref={actionRef}\n            value=\"P\"\n            onClick={() => gameRound(\"P\")}\n          />\n        </div>\n        <div className=\"button shadowmane scissor col-sm-4\">\n          <img\n            className=\"scissor-image\"\n            src={scissorImg}\n            alt=\"scissor icon\"\n            ref={actionRef}\n            value=\"S\"\n            onClick={() => gameRound(\"S\")}\n          />\n        </div>\n      </div>\n      <div className=\"row lower-navigation\">\n        <div className=\"col-sm-2\" />\n        <div className=\"col-sm-4\">\n          <button id=\"game-button\" onClick={() => (window.location.href = \"/\")}>\n            Home\n          </button>\n        </div>\n        <div className=\"col-sm-4\">\n          <button id=\"game-button\" onClick={() => clearGame()}>\n            Clear\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","/Users/codybonsma/gt-ft/sandbox/rps-game/src/Home/Home.jsx",["33"],"import React, { useState } from \"react\";\nimport { ToggleButton } from \"react-bootstrap\";\nimport \"./Home.css\";\n\nconst Home = () => {\n  const [pane, setPane] = useState(true);\n\n  // these functions toggle between tabs\n  const toggleOptOne = () => {\n    setPane(true);\n  };\n\n  const toggleOptTwo = () => {\n    setPane(false);\n  };\n\n  return (\n    <div className=\"container main-nav\">\n      <h2 id=\"front-title\">Rock, Paper, Scissors</h2>\n      <hr />\n\n      <div className=\"card text-center home-tron\">\n        <div className=\"card-header\">\n          <ul className=\"nav nav-tabs card-header-tabs\">\n            <li className=\"nav-item\">\n              <a\n                className=\"nav-link\"\n                onClick={() => toggleOptOne()}\n                role=\"tab\"\n                data-toggle=\"tab\"\n                href=\"#start\"\n              >\n                Start\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a\n                className=\"nav-link\"\n                onClick={() => toggleOptTwo()}\n                role=\"tab\"\n                href=\"#info\"\n                data-toggle=\"tab\"\n              >\n                Info\n              </a>\n            </li>\n          </ul>\n        </div>\n\n        {pane ? (\n          <div className=\"tab-content\">\n            <div\n              className=\"card-body tab-pane active\"\n              role=\"tabpanel\"\n              id=\"start\"\n            >\n              <h4 className=\"card-title\">Do you have the best hands on the interwebs?</h4>\n              <p className=\"card-text\">\n                Try your moves against the computer in a classic game of rock, paper, scissors\n              </p>\n              <a href=\"/game\" className=\"btn btn-go\">\n                Start Game\n              </a>\n            </div>{\" \"}\n          </div>\n        ) : (\n          <div className=\"card-body tab-pane\" role=\"tabpanel\" id=\"info\">\n            <p>\n              Rock Paper Scissors is a zero sum game that is usually played by\n              two people using their hands. The rules to play are pretty simple:\n              Rock wins agains Scissors - Scissors wins against Paper - and\n              Paper wins against Rock. Best out of 5, wins.\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/codybonsma/gt-ft/sandbox/rps-game/src/Footer/Footer.jsx",[],"/Users/codybonsma/gt-ft/sandbox/rps-game/src/Modal/Modal.jsx",["34"],"import React, { useState } from \"react\";\nimport \"./Modal.css\";\nimport ReactDom from \"react-dom\";\n\nconst Modal = ({ open, onClose, outcome, userCount, compCount }) => {\n  if (!open) return null;\n\n  console.log(\"GAME OUTCOME\", outcome);\n\n  return ReactDom.createPortal(\n    <>\n      <div className=\"overlaydis\" />\n      <div className=\"modal-container\">\n        <h3>{outcome.title}</h3>\n        <hr/>\n        <p>{outcome.message}</p>\n        <button className=\"mod-btn\" onClick={onClose}>\n          Play again\n        </button>{\" \"}\n        <button\n          className=\"mod-btn\"\n          onClick={() => (window.location.href = \"/\")}\n        >\n          Home\n        </button>\n      </div>\n    </>,\n    document.getElementById(\"portal\")\n  );\n};\n\nexport default Modal;\n",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":131,"column":17,"nodeType":"41","endLine":135,"endColumn":19},{"ruleId":"42","severity":1,"message":"43","line":2,"column":10,"nodeType":"44","messageId":"45","endLine":2,"endColumn":22},{"ruleId":"42","severity":1,"message":"46","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":25},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'ToggleButton' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]